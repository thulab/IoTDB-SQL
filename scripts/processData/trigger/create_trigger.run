connect root/root;
// 1. 手册上的例子
-- 1.1 手册中的例子,同1个序列上创建>1个触发器报错
-- 1.2 show triggers
-- 1.3 drop trigger
// 2. key-value 单引号 双引号  不使用引号
-- 2.1 单引号 双引号
-- 2.2 drop trigger 不加反引号 （包含连字符）
-- 2.3 case 2.3 drop trigger 双引号 (创建的时候是反引号)
-- 2.4 key-value不加引号
-- 2.5 触发器名称不加反引号,包含连字符
-- 2.6 触发器名称不加反引号,包含下划线
-- 2.7 触发器名称包含单引号/双引号,报错
-- 2.8 触发器类名去掉单引号
-- 2.9 批量insert
// 3. 序列不存在 注册触发器
// 4. 单点/批量insert
-- 4.1 手册中的例子 已经是单点insert,略
-- 4.2 支持批量的逻辑实现，单点insert
-- 4.3 delete 操作不会触发
-- 4.4 delete timeseries，其上的触发器被删除
-- 4.5 创建4.4 delete的ts，触发器不会回来
-- 4.6 delete storage group 后,其上的trigger被自动删除
-- 4.7 支持批量的逻辑实现，批量insert
-- 4.8 insert 已存在时间戳，值不同
-- 4.9 insert 乱序数据
// case 1:把自带用例的jar copy到iotdb-sql/iotdb/db1/ext/trigger/UserGuide
delete storage group root.**;<<NULL;
-- 复制手册中的创建触发器SQL
CREATE TIMESERIES root.sg1.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

CREATE TRIGGER `window-avg-alerter`
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  'lo' = '0', 
  'hi' = '10.0'
);
-- case 1.1 手册中的例子,同1个序列上创建>1个触发器报错
CREATE TRIGGER `alert-listener-sg1d1s1`
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.db.engine.trigger.example.AlertListener'
WITH (
  'lo' = '0', 
  'hi' = '100.0'
);
<<SQLSTATE;

INSERT INTO root.sg1.d1(timestamp, s1) VALUES (1, 0);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (2, 2);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (3, 4);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (4, 6);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (5, 8);

INSERT INTO root.sg1.d1(timestamp, s1) VALUES (6, 10);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (7, 12);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (8, 14);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (9, 16);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (10, 18);

-- 即时查询有时候查不到 sleep一下
sleep 500;
SELECT * FROM root.alerting;

-- case 1.2 show triggers
show triggers;
show devices;

-- case 1.3 drop trigger
drop trigger `window-avg-alerter`;
show triggers;
delete storage group root.**; 

// case 2:key-value 单引号 双引号  不用引号
-- 2.1 单引号 用例1已测试; 双引号
delete storage group root.**;<<NULL;
CREATE TIMESERIES root.sg1.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

--名称添加反引号
CREATE TRIGGER `window-avg-alerter`
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);

INSERT INTO root.sg1.d1(timestamp, s1) VALUES (1, 0);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (2, 2);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (3, 4);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (4, 6);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (5, 8);

INSERT INTO root.sg1.d1(timestamp, s1) VALUES (6, 10);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (7, 12);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (8, 14);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (9, 16);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (10, 18);

-- 即时查询有时候查不到 sleep一下
sleep 500;
SELECT * FROM root.alerting;

-- case 2.2 drop trigger 不加单引号 
drop trigger window-avg-alerter;<<SQLSTATE;
-- case 2.3 drop trigger 双引号 (创建的时候是单引号)
drop trigger "window-avg-alerter";<<SQLSTATE;
drop trigger `window-avg-alerter`;
show triggers;
delete storage group root.**;
-- case 2.4 key-value不加引号
delete storage group root.**;<<NULL;
CREATE TIMESERIES root.sg1.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;
--TRIGGER名称加引号
CREATE TRIGGER 'alerter01'
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  lo = '0',
  'hi' = "10.0"
);
<<SQLSTATE;

--TRIGGER名称不加引号
CREATE TRIGGER alerter02
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = 10.0
);
show triggers;
drop trigger alerter02;
-- case 2.5 触发器名称不加反引号 连字符
show triggers;
delete storage group root.**;
CREATE TRIGGER window-avg-alerter
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
<<SQLSTATE;

-- case 2.6 触发器名称不加反引号,包含下划线
delete storage group root.**;<<NULL;
CREATE TIMESERIES root.sg1.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;
CREATE TRIGGER window_avg_alerter
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);

show triggers;
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (1, 0);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (2, 2);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (3, 4);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (4, 6);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (5, 8);

INSERT INTO root.sg1.d1(timestamp, s1) VALUES (6, 10);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (7, 12);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (8, 14);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (9, 16);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (10, 18);

-- 即时查询有时候查不到 sleep一下
sleep 500;
SELECT * FROM root.alerting;

drop trigger window_avg_alerter;

-- 2.7 触发器名称包含单引号/双引号

CREATE TRIGGER 'window_avg_alerter'
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
<<SQLSTATE;
CREATE TRIGGER "window_avg_alerter"
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
<<SQLSTATE;
show triggers;
CREATE TRIGGER 'window_avg_alerter'
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
<<SQLSTATE;
-- 2.8 触发器类名去掉单引号
CREATE TRIGGER window_avg_alerter
AFTER INSERT
ON root.sg1.d1.s1
AS org.apache.iotdb.trigger.TriggerExample
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
<<SQLSTATE;
delete storage group root.**;
-- 2.9 批量insert
delete storage group root.**;<<NULL;
CREATE TIMESERIES root.sg1.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

CREATE TRIGGER window_avg_alerter
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
INSERT INTO root.sg1.d1(timestamp, s1) VALUES (1, 0),(2, 2),(3, 4),(4, 6),(5, 8),(6, 10),(7, 12),(8, 14),(9, 16),(10, 18);
sleep 500;
SELECT * FROM root.alerting;
drop trigger window_avg_alerter;
delete storage group root.**;
// 3. 序列不存在,注册触发器
delete storage group root.**;<<NULL;
CREATE TRIGGER window_avg_alerter
AFTER INSERT
ON root.sg1.d1.s1
AS 'org.apache.iotdb.trigger.TriggerExample'
WITH (
  "lo" = '0',
  'hi' = "10.0"
);
<<SQLSTATE;


// 4支持批量操作 单点/批量insert
-- 4.1 支持批量insert的实现,单点insert
delete storage group root.**;<<NULL;
set storage group to root.sg1;
CREATE TIMESERIES root.sg1.dev1.s_1 WITH DATATYPE=INT32, ENCODING=GORILLA;
CREATE TIMESERIES root.sg1.dev1.s_2 WITH DATATYPE=INT64, ENCODING=PLAIN;
CREATE TIMESERIES root.sg1.dev1.s_3 WITH DATATYPE=float, ENCODING=RLE;
CREATE TIMESERIES root.sg1.dev1.s_4 WITH DATATYPE=double, ENCODING=TS_2DIFF;
CREATE TIMESERIES root.sg1.dev1.s_5 WITH DATATYPE=text, ENCODING=DICTIONARY;
CREATE TIMESERIES root.sg1.dev1.s_6 WITH DATATYPE=boolean, ENCODING=PLAIN;


CREATE TRIGGER trig1
AFTER INSERT
ON root.sg1.dev1.s_1
AS 'TriggerTest'
WITH (
  'ts_type' = 'int32', 
  'remote_ip' = '127.0.0.1',
  'trig_name'='trig1'
);

CREATE TRIGGER trig2
AFTER INSERT
ON root.sg1.dev1.s_2
AS 'TriggerTest'
WITH (
  'ts_type' = 'int64', 
  'remote_ip' = '127.0.0.1',
  'trig_name'='trig2'
);

insert into root.sg1.dev1(time,s_1,s_2) values(1,100,200);
insert into root.sg1.dev1(time,s_1,s_2) values(2,300,400);
sleep 500;
show storage group;
show devices;
show timeseries;
select * from root.sg1.dev1;
select * from root.target.alerting;
-- 4.3 delete 操作不会触发
delete from root.sg1.dev1.*;
sleep 500;
select * from root.sg1.dev1;
select * from root.target.alerting;
show triggers;
-- 4.4 delete timeseries，其上的触发器被删除
delete timeseries root.sg1.dev1.s_1; 
show triggers;
-- 4.5 创建4.4 delete的ts，触发器不会回来
CREATE TIMESERIES root.sg1.dev1.s_1 WITH DATATYPE=INT32, ENCODING=GORILLA;
show triggers;
insert into root.sg1.dev1(time,s_1,s_2) values(3,500,600);
sleep 1000;
select * from root.sg1.dev1;
select * from root.target.alerting;
-- 4.6 delete storage group 后,其上的trigger被自动删除
delete storage group root.sg1;
show triggers;
set storage group to root.sg1;
CREATE TIMESERIES root.sg1.dev1.s_1 WITH DATATYPE=INT32, ENCODING=GORILLA;
CREATE TIMESERIES root.sg1.dev1.s_2 WITH DATATYPE=INT64, ENCODING=PLAIN;
insert into root.sg1.dev1(time,s_1,s_2) values(4,1500,1600);
sleep 500;
select * from root.sg1.dev1;
select * from root.target.alerting;
delete storage group root.**;

-- 4.7 支持批量的逻辑实现，批量insert
delete storage group root.**;<<NULL;
set storage group to root.sg1;
CREATE TIMESERIES root.sg1.dev1.s_1 WITH DATATYPE=INT32, ENCODING=GORILLA;
CREATE TIMESERIES root.sg1.dev1.s_2 WITH DATATYPE=INT64, ENCODING=PLAIN;
CREATE TIMESERIES root.sg1.dev1.s_3 WITH DATATYPE=float, ENCODING=RLE;
CREATE TIMESERIES root.sg1.dev1.s_4 WITH DATATYPE=double, ENCODING=TS_2DIFF;
CREATE TIMESERIES root.sg1.dev1.s_5 WITH DATATYPE=text, ENCODING=DICTIONARY;
CREATE TIMESERIES root.sg1.dev1.s_6 WITH DATATYPE=boolean, ENCODING=PLAIN;


CREATE TRIGGER trig1
AFTER INSERT
ON root.sg1.dev1.s_1
AS 'TriggerTest'
WITH (
  'ts_type' = 'int32',
  'remote_ip' = '127.0.0.1',
  'trig_name'='trig1'
);

CREATE TRIGGER trig2
AFTER INSERT
ON root.sg1.dev1.s_2
AS 'TriggerTest'
WITH (
  'ts_type' = 'int64',
  'remote_ip' = '127.0.0.1',
  'trig_name'='trig2'
);

insert into root.sg1.dev1(time,s_1,s_2) values(1,100,200),(2,300,400),(3,500,600),(4,700,800),(5,900,1000);
insert into root.sg1.dev1(time,s_1,s_2) values(11,1100,1200),(12,1300,1400),(13,1500,1600),(14,1700,1800),(15,1900,2000);
insert into root.sg1.dev1(time,s_1,s_2) values(111,11100,11200),(112,11300,11400),(113,11500,11600),(114,11700,11800),(115,11900,21000);
flush;
sleep 100;
select s_1,s_2,s_3,s_4,s_5,s_6 from root.sg1.dev1;
select local_trig1,local_trig2,remotetrig1,remotetrig2 from root.target.alerting;
-- 4.8  相同时间戳 更新一下值（4.9乱序）
insert into root.sg1.dev1(time,s_1,s_2) values(11,11300,12300),(12,13300,14300),(13,15300,16300),(14,17300,18300),(15,19300,23000);

flush;
select s_1,s_2,s_3,s_4,s_5,s_6 from root.sg1.dev1;
select local_trig1,local_trig2,remotetrig1,remotetrig2 from root.target.alerting;

delete storage group root.**;
