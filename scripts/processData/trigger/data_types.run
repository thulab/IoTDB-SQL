
//-- 监控各种类型的trigger
-- 1. 非对齐timeseries
-- 2. 对齐timeseries
connect root/root;


drop database root.**;<<NULL;
sleep 5000;

-- 1. 非对齐timeseries
delete timeseries root.**;<<NULL;
drop trigger `datatype_int-s1`;<<NULL;
drop trigger `datatype_long-s2`;<<NULL;
drop trigger `datatype_float-s3`;<<NULL;
drop trigger `datatype_double-s4`;<<NULL;
drop trigger `datatype_text-s5`;<<NULL;
drop trigger `datatype_boolean-s6`;<<NULL;


CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.nonaligned_dev1.s_1 WITH DATATYPE=INT32, ENCODING=GORILLA;
CREATE TIMESERIES root.triggertest.nonaligned_dev1.s_2 WITH DATATYPE=INT64, ENCODING=PLAIN;
CREATE TIMESERIES root.triggertest.nonaligned_dev1.s_3 WITH DATATYPE=float, ENCODING=RLE;
CREATE TIMESERIES root.triggertest.nonaligned_dev1.s_4 WITH DATATYPE=double, ENCODING=TS_2DIFF;
CREATE TIMESERIES root.triggertest.nonaligned_dev1.s_5 WITH DATATYPE=text, ENCODING=DICTIONARY;
CREATE TIMESERIES root.triggertest.nonaligned_dev1.s_6 WITH DATATYPE=boolean, ENCODING=PLAIN;


CREATE STATELESS TRIGGER `datatype_int-s1`
AFTER INSERT
ON root.triggertest.nonaligned_dev1.s_1
AS 'TriggerTest'
WITH (
  'ts_type' = 'int32',
  'remote_ip' = '127.0.0.1',
  'trig_name'='datatype_int-s1'
);

CREATE STATELESS TRIGGER `datatype_long-s2`
AFTER INSERT
ON root.triggertest.nonaligned_dev1.s_2
AS 'TriggerTest'
WITH (
  'ts_type' = 'int64',
  'remote_ip' = '127.0.0.1',
  'trig_name'='datatype_long-s2'
);

insert into root.triggertest.nonaligned_dev1(time,s_1,s_2) values(1,100,200);
insert into root.triggertest.nonaligned_dev1(time,s_1,s_2) values(2,null,450);
insert into root.triggertest.nonaligned_dev1(time,s_1,s_2) values(3,1300,1400);
sleep 200;
-- 3条
select * from root.triggertest.nonaligned_dev1;
-- 3条
select count(*) from root.target.alerting;

CREATE STATELESS TRIGGER `datatype_float-s3`
AFTER INSERT
ON root.triggertest.nonaligned_dev1.s_3
AS 'TriggerTest'
WITH (
  'ts_type' = 'float',
  'remote_ip' = '127.0.0.1',
  'trig_name'='datatype_float-s3'
);

CREATE STATELESS TRIGGER `datatype_double-s4`
AFTER INSERT
ON root.triggertest.nonaligned_dev1.s_4
AS 'TriggerTest'
WITH (
  'ts_type' = 'double',
  'remote_ip' = '127.0.0.1',
  'trig_name'='datatype_double-s4'
);
CREATE STATELESS TRIGGER `datatype_text-s5`
AFTER INSERT
ON root.triggertest.nonaligned_dev1.s_5
AS 'TriggerTest'
WITH (
  'ts_type' = 'text',
  'remote_ip' = '127.0.0.1',
  'trig_name'='datatype_text-s5'
);
CREATE STATELESS TRIGGER `datatype_boolean-s6`
AFTER INSERT
ON root.triggertest.nonaligned_dev1.s_6
AS 'TriggerTest'
WITH (
  'ts_type' = 'boolean',
  'remote_ip' = '127.0.0.1',
  'trig_name'='datatype_boolean-s6'
);
insert into root.triggertest.nonaligned_dev1 (time, s_1,s_2,s_3,s_4,s_5,s_6) values (1000,1000,200,100.45,200.55,'non trig',true),(2000,150,2100,100.45,200.55,'non trig',true),(3000,200,220,400.45,200.55,'non trig',true),(4000,250,230,100.45,500.55,'non trig',TRUE),(5000,410,240,100.45,200.55,'single monitor is good enough',1),(6000,310,null,100.45,200.55,'non trig',false),(7000,320,260,null,200.55,'non trig',true),(8000,430,270,100.45,null,'',true),(9000,340,280,100.45,200.55,null,null),(10000,650,600,800.45,900.55,'this statement is too long to process',0);

flush;
sleep 500;
-- 2
//-- SHOW DATABASES;
-- 2
show devices;
-- 10
show timeseries;

//-- 13
select * from root.triggertest.nonaligned_dev1;
//-- 17
select count(*) from root.target.alerting;

-- 4.3 delete 操作不会触发
delete from root.triggertest.nonaligned_dev1.*;
//-- 0
select * from root.triggertest.nonaligned_dev1;
//-- 17
select count(*) from root.target.alerting;
-- 4.4 delete timeseries，其上的触发器不会被删除
delete timeseries root.triggertest.nonaligned_dev1.s_1;
//-- 17
select count(*) from root.target.alerting;

drop trigger `datatype_int-s1`;
drop trigger `datatype_long-s2`;
drop trigger `datatype_float-s3`;
drop trigger `datatype_double-s4`;
drop trigger `datatype_text-s5`;
drop trigger `datatype_boolean-s6`;
SHOW TRIGGERS;
delete timeseries root.**;<<NULL;
sleep 1000;


-- 2. aligned timeseries
delete timeseries root.**;<<NULL;
drop trigger `aligned_int_s1`;<<NULL;
drop trigger `aligned_long_s2`;<<NULL;
drop trigger `aligned_float_s3`;<<NULL;
drop trigger `aligned_double_s4`;<<NULL;
drop trigger `aligned_text_s5`;<<NULL;
drop trigger `aligned_boolean_s6`;<<NULL;

CREATE DATABASE root.triggertest;<<NULL;
CREATE ALIGNED TIMESERIES root.triggertest.aligned_dev1 (s_1 DATATYPE=INT32 ENCODING=GORILLA, s_2 DATATYPE=INT64 ENCODING=PLAIN, s_3 DATATYPE=float ENCODING=RLE, s_4 DATATYPE=double ENCODING=TS_2DIFF, s_5 DATATYPE=text ENCODING=DICTIONARY, s_6 DATATYPE=boolean ENCODING=PLAIN);

sleep 500;

CREATE STATELESS TRIGGER `aligned_int_s1`
AFTER INSERT
ON root.triggertest.aligned_dev1.s_1
AS 'TriggerTest'
WITH (
  'ts_type' = 'int32',
  'remote_ip' = '127.0.0.1',
  'trig_name'='aligned_int_s1'
);

CREATE STATELESS TRIGGER `aligned_long_s2`
AFTER INSERT
ON root.triggertest.aligned_dev1.s_2
AS 'TriggerTest'
WITH (
  'ts_type' = 'int64',
  'remote_ip' = '127.0.0.1',
  'trig_name'='aligned_long_s2'
);

insert into root.triggertest.aligned_dev1(time,s_1,s_2) aligned values(1,100,200);
insert into root.triggertest.aligned_dev1(time,s_1,s_2) aligned values(2,300,450);
insert into root.triggertest.aligned_dev1(time,s_1,s_2) aligned values(3,1300,1400);
sleep 200;
-- 3
select * from root.triggertest.aligned_dev1;
-- 3
select count(*) from root.target.alerting;

CREATE STATELESS TRIGGER `aligned_float_s3`
AFTER INSERT
ON root.triggertest.aligned_dev1.s_3
AS 'TriggerTest'
WITH (
  'ts_type' = 'float',
  'remote_ip' = '127.0.0.1',
  'trig_name'='aligned_float_s3'
);

CREATE STATELESS TRIGGER `aligned_double_s4`
AFTER INSERT
ON root.triggertest.aligned_dev1.s_4
AS 'TriggerTest'
WITH (
  'ts_type' = 'double',
  'remote_ip' = '127.0.0.1',
  'trig_name'='aligned_double_s4'
);
CREATE STATELESS TRIGGER `aligned_text_s5`
AFTER INSERT
ON root.triggertest.aligned_dev1.s_5
AS 'TriggerTest'
WITH (
  'ts_type' = 'text',
  'remote_ip' = '127.0.0.1',
  'trig_name'='aligned_text_s5'
);
CREATE STATELESS TRIGGER `aligned_boolean_s6`
AFTER INSERT
ON root.triggertest.aligned_dev1.s_6
AS 'TriggerTest'
WITH (
  'ts_type' = 'boolean',
  'remote_ip' = '127.0.0.1',
  'trig_name'='aligned_boolean_s6'
);
insert into root.triggertest.aligned_dev1(time,s_1,s_2,s_3,s_4,s_5,s_6) aligned values (1000,1000,200,100.45,200.55,'non trig',true),(2000,150,2100,100.45,200.55,'non trig',true),(3000,200,220,400.45,200.55,'non trig',true),(4000,250,230,100.45,500.55,'non trig',TRUE),(5000,410,240,100.45,200.55,'single monitor is good enough',1),(6000,310,null,100.45,200.55,'non trig',false),(7000,320,260,null,200.55,'non trig',true),(8000,430,270,100.45,null,'',true),(9000,340,280,100.45,200.55,null,null),(10000,650,600,800.45,900.55,'this statement is too long to process',0);
flush;
sleep 200;
-- 13
select s_1,s_2,s_3,s_4,s_5,s_6 from root.triggertest.aligned_dev1;
-- 17
select count(*) from root.target.alerting;
-- 4.8  相同时间戳 更新一下值（4.9乱序）
insert into root.triggertest.aligned_dev1(time,s_1,s_2,s_3,s_4,s_5,s_6) aligned values (1000,100,200,500.45,200.55,'non trig',true),(2000,1150,1210,1100.45,1200.55,'non trig',false);

flush;
-- 13
select s_1,s_2,s_3,s_4,s_5,s_6 from root.triggertest.aligned_dev1;
-- 23
select count(*) from root.target.alerting;

drop database root.**;<<NULL;
drop trigger `aligned_int_s1`;
drop trigger `aligned_long_s2`;
drop trigger `aligned_float_s3`;
drop trigger `aligned_double_s4`;
drop trigger `aligned_text_s5`;
drop trigger `aligned_boolean_s6`;



